package moazkrapackage;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

public class MST {

	    static class Edge {
	        int source;
	        int destination;
	        int weight;

	        public Edge(int source, int destination, int weight) {
	            this.source = source;
	            this.destination = destination;
	            this.weight = weight;
	        }
	    }

	    static class Graph {

	        int vertices;
	        ArrayList<Edge> allEdges = new ArrayList<>();

	        Graph(int vertices) {
	            this.vertices = vertices;
	        }

	        public void addedge(int source, int destination, int weight) {
	            Edge edge = new Edge(source, destination, weight);
	            allEdges.add(edge); 				//add to total edges
	        }
	        
	        public void printMST(){
	            PriorityQueue<Edge> pq = new PriorityQueue<>(allEdges.size(), Comparator.comparingInt(o -> o.weight));

	            //add all the edges to priority queue, //sort the edges on weights
	            
	            for (int i = 0; i <allEdges.size() ; i++) {
	                pq.add(allEdges.get(i));
	            }

	            //create a temp []
	            
	            int [] temp = new int[vertices];

	            //makeset
	            
	            makeSet(temp);

	            ArrayList<Edge> mst = new ArrayList<>();

	            //process vertices - 1 edges
	            
	            int index = 0;
	            while(index<vertices-1){
	                Edge edge = pq.remove();
	                //check if adding this edge creates a cycle
	                int x_set = find(temp, edge.source);
	                int y_set = find(temp, edge.destination);

	                if(x_set==y_set){
	                    //ignore, will create cycle
	                }else {
	                    //add it to our final result
	                    mst.add(edge);
	                    index++;
	                    union(temp,x_set,y_set);
	                }
	            }
	            //print MST
	            System.out.println("Minimum Spanning Tree: ");
	            printGraph(mst);
	        }

	        public void makeSet(int [] temp){
	            //Make set- creating a new element with a temp pointer to itself.
	            for (int i = 0; i <vertices ; i++) {
	                temp[i] = i;
	            }
	        }

	        public int find(int [] temp, int vertex){
	            //chain of temp pointers from x upwards through the tree
	            // until an element is reached whose temp is itself
	            if(temp[vertex]!=vertex)
	                return find(temp, temp[vertex]);;
	            return vertex;
	        }

	        public void union(int [] temp, int x, int y){
	            int x_set_temp = find(temp, x);
	            int y_set_temp = find(temp, y);
	            //make x as temp of y
	            temp[y_set_temp] = x_set_temp;
	        }

	        public void printGraph(ArrayList<Edge> edgeList){
	            for (int i = 0; i <edgeList.size() ; i++) {
	                Edge edge = edgeList.get(i);
	                System.out.println("Edge-" + i + " source: " + edge.source +
	                        " destination: " + edge.destination +
	                        " weight: " + edge.weight);
	            }
	        }
	    }
	    public static void main(String[] args) {
	    	Scanner scan = new Scanner (System.in);
	    	
	    	
	    	System.out.println("HOW MANY VERTICES (NODES) YOU HAVE?");
	            int vertices = 6; //6 till now w lazm kol ma tzed add edge 
	            
	            Graph graph = new Graph(vertices); //making new variable without overwriting the old one
	       
	            /*
		    	for ( int i = 0 ; i<vertices+1 ; i++) {
		    		System.out.println("enter source");
		    		int x = scan.nextInt();
		    		System.out.println("enter destination");
		    		int y = scan.nextInt();
		    		System.out.println("enter weight");
		    		int z = scan.nextInt();
		    		
		    		graph.addedge(x,y,z);

		    	}
		    	
		    	for ( int u = 0 ; u<vertices+1 ; u++) {
		    		
		    		graph.addedge(x,y,z);
		    	}
		    		 */
	            
	            //insert the source,destination,weight between()
	            
	            graph.addedge(1, 2, 2);
	            graph.addedge(1, 3, 5);
	            graph.addedge(1, 4, 4);
	            graph.addedge(2, 5, 7);
	            graph.addedge(2, 3, 2);
	            graph.addedge(3, 5, 4);
	            graph.addedge(3, 6, 3);
	            graph.addedge(3, 4, 1);
	            graph.addedge(4, 6, 4);
	            graph.addedge(5, 7, 5);
	            graph.addedge(5, 6, 1);
	            graph.addedge(6, 7, 7);


	            
	            /*
	            graph.addedge(0, 1, 4);
	            graph.addedge(0, 2, 3);
	            graph.addedge(1, 2, 1);
	            graph.addedge(1, 3, 2);
	            graph.addedge(2, 3, 4);
	            graph.addedge(3, 4, 2);
	            graph.addedge(4, 5, 6);
	            */
	            
	            graph.printMST();
	           
	            scan.close();
	    }
	}


